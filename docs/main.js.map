{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AAEA;AACA;AAAA;AAUA;AAAA;AAAA;AANA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzKA;AAmCA;AAIA;AAAA;AAAA;AAHA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACvLA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAcA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACzEA;AAGA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACrDA;AAIA;AAAA;AACA;AAGA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AChBA;AAcA;AASA;AAAA;AAAA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AC5HA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACnBA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AAEA;AAMA;AAAA;AAAA;AAHA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AAAA;AAwBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sources":["webpack://words-training/./src/scripts/constants.ts","webpack://words-training/./src/scripts/models/history-model.ts","webpack://words-training/./src/scripts/models/models.ts","webpack://words-training/./src/scripts/models/tasks-model.ts","webpack://words-training/./src/scripts/presenter.ts","webpack://words-training/./src/scripts/utils.ts","webpack://words-training/./src/scripts/views/button-view.ts","webpack://words-training/./src/scripts/views/counter-view.ts","webpack://words-training/./src/scripts/views/modal-view.ts","webpack://words-training/./src/scripts/views/restore-view.ts","webpack://words-training/./src/scripts/views/result-view.ts","webpack://words-training/./src/scripts/views/task-view.ts","webpack://words-training/./src/scripts/views/views.ts","webpack://words-training/webpack/bootstrap","webpack://words-training/webpack/runtime/define property getters","webpack://words-training/webpack/runtime/hasOwnProperty shorthand","webpack://words-training/webpack/runtime/make namespace object","webpack://words-training/./src/index.ts"],"sourcesContent":["export const consts = {\n  animationLength: 400,\n  animationPuase: 100,\n  failPuaseLength: 1000,\n};\n","import { Progress, Task } from \"./tasks-model\";\n\nexport type StateInStore = {\n  tasks: Task[];\n  progress: Progress;\n};\n\nexport class HistoryModel {\n  storagKey = \"state\";\n\n  restore(tasks: Task[], progress: Progress) {\n    tasks\n      .filter((task) => task.status !== \"pending\")\n      .forEach((task, i) => {\n        const historyProgress = { ...progress, taskNumber: i + 1 };\n        if (i === 0) {\n          history.replaceState({ task, progress: historyProgress }, \"\");\n        } else {\n          history.pushState({ task, progress: historyProgress }, \"\");\n        }\n      });\n  }\n\n  saveToStore(tasks: Task[], progress: Progress) {\n    const state: StateInStore = {\n      tasks,\n      progress,\n    };\n    localStorage.setItem(this.storagKey, JSON.stringify(state));\n  }\n\n  getFromStore(): StateInStore | null {\n    const stateString = localStorage.getItem(this.storagKey);\n    if (stateString) {\n      try {\n        const state = JSON.parse(stateString);\n        return state;\n      } catch (error) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  getProgress(currentTask: Task): Progress | null {\n    const historyTask: Task | undefined = history.state?.task;\n    const historyProgress: Progress | undefined = history.state?.progress;\n    if (\n      historyProgress &&\n      historyTask &&\n      currentTask &&\n      historyTask.id !== currentTask.id\n    ) {\n      return historyProgress;\n    }\n    return null;\n  }\n\n  getTask(currentTask: Task): Task {\n    const historyTask: Task | undefined = history.state?.task;\n    if (historyTask && historyTask.id !== currentTask.id) {\n      return historyTask;\n    }\n    return currentTask;\n  }\n\n  clearStore() {\n    localStorage.removeItem(this.storagKey);\n  }\n}\n","import { consts } from \"../constants\";\nimport { Reactor } from \"../utils\";\nimport { HistoryModel } from \"./history-model\";\nimport { Progress, Result, Task, TasksModel, TaskUpdate } from \"./tasks-model\";\n\nclass Model {\n  customEvents: Reactor;\n  trainingLength = 6;\n  maxErrorCount = 3;\n\n  tasks: TasksModel;\n  historyModel: HistoryModel;\n\n  constructor(customEvents: Reactor) {\n    this.customEvents = customEvents;\n    this.tasks = new TasksModel(this.trainingLength);\n    this.historyModel = new HistoryModel();\n  }\n\n  restoreOrStart() {\n    this.customEvents.dispatchEvent(\"updateCounter\");\n    if (this.historyModel.getFromStore()) {\n      this.customEvents.dispatchEvent(\"updateRestore\");\n    } else {\n      this.start();\n    }\n  }\n\n  start() {\n    if (history.state !== null) {\n      history.replaceState(null, \"\");\n    }\n    this.tasks.start();\n    this.updateAllViewAndCloseModal();\n    this.historyModel.clearStore();\n  }\n\n  restore() {\n    const state = this.historyModel.getFromStore();\n    if (state) {\n      this.tasks.restore(state.tasks);\n      this.historyModel.restore(state.tasks, state.progress);\n    }\n    this.updateAllViewAndCloseModal();\n  }\n\n  updateAllViewAndCloseModal() {\n    this.customEvents.dispatchEvent(\"updateCounter\");\n    this.customEvents.dispatchEvent(\"updateTask\");\n    this.customEvents.dispatchEvent(\"closeModal\");\n  }\n\n  getTaskToDisplay(): Task {\n    const currentTask = this.tasks.getCurrent();\n    return this.historyModel.getTask(currentTask);\n  }\n\n  getProgressToDisplay(): Progress {\n    const currentTask = this.tasks.getCurrent();\n    return (\n      this.historyModel.getProgress(currentTask) || this.tasks.getProgress()\n    );\n  }\n\n  getResults(): Result {\n    return this.tasks.getResults();\n  }\n\n  select(id: string) {\n    const { solved, letters } = this.tasks.getCurrent();\n    const selected = letters.find((letter) => letter.id === id);\n    if (!selected) {\n      return;\n    }\n    if (this.tasks.isSelectionCorrect(selected.value)) {\n      this.updateTaskAndSave({\n        letters: letters.filter((letter) => letter.id !== id),\n        solved: [...solved, selected],\n      });\n      this.customEvents.dispatchEvent(\"updateTask\");\n      this.moveNextIfCurrentIsSolved();\n    } else {\n      this.increaseErrorCount(id);\n    }\n  }\n\n  enter(symbol: string) {\n    if (this.tasks.isHasNoRoomForError(this.maxErrorCount)) {\n      return;\n    }\n    if (this.tasks.isSelectionCorrect(symbol)) {\n      this.pushSymbolsToSolved(symbol);\n      this.customEvents.dispatchEvent(\"updateTask\");\n      this.moveNextIfCurrentIsSolved();\n    } else {\n      const letterId = this.tasks.getLetterIdBySymbol(symbol);\n      this.increaseErrorCount(letterId);\n    }\n  }\n\n  increaseErrorCount(letterId: string | null) {\n    const task = this.tasks.getCurrent();\n    this.updateTaskAndSave({ errorCount: task.errorCount + 1 });\n    if (task.errorCount >= this.maxErrorCount) {\n      this.showAnswerOnFail();\n    } else if (letterId) {\n      this.customEvents.dispatchEvent(\"error\", letterId);\n    }\n  }\n\n  showAnswerOnFail() {\n    this.updateTaskAndSave({ status: \"failed\" });\n    this.pushSymbolsToSolved();\n    this.customEvents.dispatchEvent(\"updateTask\");\n    this.moveToNextTask(consts.failPuaseLength);\n  }\n\n  pushSymbolsToSolved(symbols?: string) {\n    const result = this.tasks.pushSymbolsInCurrent(symbols);\n    this.updateTaskAndSave(result);\n  }\n\n  moveNextIfCurrentIsSolved() {\n    if (this.tasks.isCurrentSolved()) {\n      this.updateTaskAndSave({ status: \"success\" });\n      this.moveToNextTask();\n    }\n  }\n\n  moveToNextTask(timeOut = 0) {\n    const nextTaskIndex = this.tasks.getIndex() + 1;\n    const task = this.tasks.getCurrent();\n    const progress = this.tasks.getProgress();\n    if (nextTaskIndex >= this.tasks.getTotal()) {\n      setTimeout(() => {\n        history.replaceState({ task, progress }, \"\");\n        this.moveToResult();\n      }, timeOut);\n    } else {\n      setTimeout(() => {\n        history.replaceState({ task, progress }, \"\");\n        this.tasks.setIndex(nextTaskIndex);\n        this.updateTaskAndSave({ status: \"started\" });\n        history.pushState(\n          { task: this.tasks.getCurrent(), progress: this.tasks.getProgress() },\n          \"\"\n        );\n        this.customEvents.dispatchEvent(\"updateTask\");\n        this.customEvents.dispatchEvent(\"updateCounter\");\n      }, timeOut || consts.animationLength + consts.animationPuase);\n    }\n  }\n\n  moveToResult() {\n    this.historyModel.clearStore();\n    this.customEvents.dispatchEvent(\"updateResults\");\n  }\n\n  updateTaskAndSave(data: TaskUpdate) {\n    this.tasks.updateCurrent(data);\n    this.saveStateToStore();\n  }\n\n  saveStateToStore() {\n    this.historyModel.saveToStore(this.tasks.get(), this.tasks.getProgress());\n  }\n\n  history() {\n    this.updateAllViewAndCloseModal();\n  }\n}\n\nexport { Model };\n","import { getRandomId, getRandomWords, shuffle } from \"../utils\";\n\nexport type Letter = {\n  id: string;\n  value: string;\n};\n\nexport type Task = {\n  id: string;\n  answer: string;\n  solved: Letter[];\n  letters: Letter[];\n  errorCount: number;\n  status: TaskStatus;\n};\n\nexport type TaskUpdate = {\n  solved?: Letter[];\n  letters?: Letter[];\n  errorCount?: number;\n  status?: TaskStatus;\n};\n\nexport type TaskStatus = \"success\" | \"failed\" | \"pending\" | \"started\";\n\nexport type Result = {\n  wordsWithoutErrors: number;\n  errorCount: number;\n  wordWithMostWrrors: string | null;\n};\nexport type Progress = {\n  taskNumber: number;\n  trainingLength: number;\n};\n\nexport class TasksModel {\n  tasks: Task[] = [];\n  currentTask = 0;\n  trainingLength = 6;\n  constructor(trainingLength: number) {\n    this.trainingLength = trainingLength;\n  }\n\n  get(): Task[] {\n    return this.tasks;\n  }\n\n  getCurrent(): Task {\n    return this.tasks[this.currentTask];\n  }\n\n  getIndex(): number {\n    return this.currentTask;\n  }\n\n  getTotal(): number {\n    return this.tasks.length;\n  }\n\n  setIndex(index: number) {\n    this.currentTask = index;\n  }\n\n  getCountOfStarted(): number {\n    return this.tasks.filter((task) => task.status !== \"pending\").length;\n  }\n\n  getProgress(): Progress {\n    return {\n      taskNumber: this.getIndex() + 1,\n      trainingLength: this.getTotal() || this.trainingLength,\n    };\n  }\n\n  getResults(): Result {\n    const result: Result = {\n      wordsWithoutErrors: 0,\n      errorCount: 0,\n      wordWithMostWrrors: null,\n    };\n    let maxErrorCount = 0;\n    this.tasks.forEach((task) => {\n      if (task.errorCount) {\n        result.errorCount += task.errorCount;\n        if (task.errorCount > maxErrorCount) {\n          result.wordWithMostWrrors = task.answer;\n          maxErrorCount = task.errorCount;\n        }\n      } else {\n        result.wordsWithoutErrors += 1;\n      }\n    });\n    return result;\n  }\n\n  getLetterIdBySymbol(symbol: string): string | null {\n    const { letters } = this.getCurrent();\n    const letter = letters.find((letter) => letter.value === symbol);\n    return letter ? letter.id : null;\n  }\n\n  start() {\n    const trainingId = getRandomId();\n    const words = getRandomWords(this.trainingLength);\n    this.tasks = words.map((word) => this.createTaskFromWord(trainingId, word));\n    this.currentTask = 0;\n  }\n\n  createTaskFromWord(trainingId: number, word: string): Task {\n    const letters = this.convertWordToLetters(word);\n    return {\n      id: `${trainingId}_${word}`,\n      answer: word,\n      solved: [],\n      letters: shuffle(letters),\n      errorCount: 0,\n      status: \"pending\",\n    };\n  }\n\n  convertWordToLetters(word: string, prefix = \"\"): Letter[] {\n    return word.split(\"\").map((letter, i) => ({\n      id: prefix + `${letter.charCodeAt(0)}_${i}`,\n      value: letter,\n    }));\n  }\n\n  restore(tasks: Task[]) {\n    this.tasks = tasks;\n    this.currentTask = this.getCountOfStarted() - 1;\n  }\n\n  updateCurrent(data: TaskUpdate) {\n    const task = this.getCurrent();\n    if (data.solved) {\n      task.solved = data.solved;\n    }\n    if (data.letters) {\n      task.letters = data.letters;\n    }\n    if (data.errorCount !== undefined) {\n      task.errorCount = data.errorCount;\n    }\n    if (data.status) {\n      task.status = data.status;\n    }\n  }\n\n  isSelectionCorrect(symbol: string): boolean {\n    const task = this.getCurrent();\n    const expected = task.answer[task.solved.length];\n    return symbol === expected;\n  }\n\n  pushSymbolsInCurrent(symbols?: string): {\n    letters: Letter[];\n    solved: Letter[];\n  } {\n    const task = this.getCurrent();\n    const symbolsToPush = symbols || task.answer.substring(task.solved.length);\n\n    const letters = [...task.letters];\n    const solved = [...task.solved];\n\n    symbolsToPush.split(\"\").forEach((symbol) => {\n      const index = letters.findIndex((letter) => letter.value === symbol);\n      const letter = letters.splice(index, 1)[0];\n      solved.push(letter);\n    });\n\n    return {\n      solved,\n      letters,\n    };\n  }\n\n  isCurrentSolved(): boolean {\n    const task = this.getCurrent();\n    return task.solved.length === task.answer.length;\n  }\n\n  isHasNoRoomForError(maxErrorCount: number): boolean {\n    const task = this.getCurrent();\n    if (!task || task.errorCount >= maxErrorCount) {\n      return true;\n    }\n    return false;\n  }\n}\n","import { View } from \"./views/views\";\nimport { Model } from \"./models/models\";\nimport { Reactor } from \"./utils\";\n\nclass Presenter {\n  model: Model;\n  view: View;\n  customEvents: Reactor;\n\n  constructor(model: Model, view: View, customEvents: Reactor) {\n    this.model = model;\n    this.view = view;\n    this.customEvents = customEvents;\n\n    this.view.addSelectLetterHandler((id: string) => {\n      model.select(id);\n    });\n    this.view.addEnterLetterHandler((symbol: string) => {\n      model.enter(symbol);\n    });\n    this.view.addHistoryHandler(() => {\n      model.history();\n    });\n    this.view.addModalButtonHandler((id: string) => {\n      switch (id) {\n        case \"restart\":\n          model.start();\n          break;\n        case \"restore\":\n          model.restore();\n          break;\n        case \"close\":\n          view.closeModal();\n          break;\n        default:\n          throw new Error(`Unexpected modal action id: ${id}`);\n      }\n    });\n\n    this.customEvents.registerEvent(\"updateTask\", function () {\n      view.updateTaskView(model.getTaskToDisplay());\n    });\n\n    this.customEvents.registerEvent(\"updateResults\", function () {\n      view.updateResultView(model.getResults(), true);\n    });\n\n    this.customEvents.registerEvent(\"updateRestore\", function () {\n      view.updateRestoreView(true);\n    });\n\n    this.customEvents.registerEvent(\"updateCounter\", function () {\n      view.updateCountView(model.getProgressToDisplay());\n    });\n\n    this.customEvents.registerEvent(\"error\", function (id) {\n      view.error(id as string);\n    });\n\n    this.customEvents.registerEvent(\"closeModal\", function () {\n      view.closeModal();\n    });\n\n    this.model.restoreOrStart();\n  }\n}\n\nexport { Presenter };\n","type EventCallBack = (args: unknown) => void;\n\nclass CustomEvent {\n  name: string;\n  callbacks: EventCallBack[] = [];\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  registerCallback(callback: EventCallBack) {\n    this.callbacks.push(callback);\n  }\n}\n\nclass EventResolver {\n  events: Record<string, CustomEvent> = {};\n\n  registerEvent(eventName: string, callback?: EventCallBack) {\n    const event = new CustomEvent(eventName);\n    this.events[eventName] = event;\n    if (callback) {\n      this.addEventListener(eventName, callback);\n    }\n  }\n\n  addEventListener(eventName: string, callback: EventCallBack) {\n    this.events[eventName].registerCallback(callback);\n  }\n\n  dispatchEvent(eventName: string, eventArgs: unknown = null) {\n    this.events[eventName].callbacks.forEach(function (callback) {\n      callback(eventArgs);\n    });\n  }\n}\n\nexport { CustomEvent, EventResolver as Reactor };\n\nconst list = [\n  \"apple\",\n  \"function\",\n  \"timeout\",\n  \"task\",\n  \"application\",\n  \"data\",\n  \"tragedy\",\n  \"sun\",\n  \"symbol\",\n  \"button\",\n  \"software\",\n];\n\nexport function shuffle<T>(arr: T[]): T[] {\n  const result = [...arr];\n  let current = arr.length;\n  let random;\n\n  while (current != 0) {\n    random = Math.floor(Math.random() * current);\n    current--;\n    [result[current], result[random]] = [result[random], result[current]];\n  }\n\n  return result;\n}\n\nexport function getRandomWords(count: number) {\n  return shuffle(list).slice(0, count);\n}\n\nexport function getRandomId(): number {\n  return new Date().getTime();\n}\n","import { consts } from \"../constants\";\nimport { Letter } from \"../models/tasks-model\";\n\nexport class ButtonView {\n  element: HTMLButtonElement;\n  status: \"primary\" | \"success\" | \"failed\" = \"primary\";\n\n  constructor(letter: Letter) {\n    this.element = document.createElement(\"button\");\n    this.element.setAttribute(\"type\", \"button\");\n    this.element.setAttribute(\"data-index\", letter.id);\n    this.element.className = \"btn\";\n    const animationLength = consts.animationLength / 100;\n    this.element.style.cssText = `width: 42px; margin: 3px; transition-property: all; transition-duration: 0.${animationLength}s;`;\n    this.element.innerText = letter.value;\n  }\n\n  getElement(): HTMLButtonElement {\n    return this.element;\n  }\n\n  updateClasses(className: string) {\n    if (this.element.className === \"btn\") {\n      this.element.classList.add(className);\n    } else {\n      setTimeout(() => {\n        this.element.className = `btn ${className}`;\n      }, 0);\n    }\n  }\n\n  makePrimary() {\n    this.status = \"primary\";\n    this.updateClasses(\"btn-primary\");\n  }\n\n  makeSuccess() {\n    this.status = \"success\";\n    this.updateClasses(\"btn-success\");\n  }\n\n  makeError() {\n    this.updateClasses(\"btn-danger\");\n    setTimeout(() => {\n      if (this.status !== \"failed\") {\n        this.updateClasses(\"btn-primary\");\n      }\n    }, consts.animationLength);\n  }\n\n  makeFailed() {\n    this.status = \"failed\";\n    this.updateClasses(\"btn-danger\");\n  }\n}\n","export class CounterView {\n  currentQuestion: HTMLElement;\n  totalQuestions: HTMLElement;\n\n  constructor() {\n    this.currentQuestion = document.getElementById(\n      \"current_question\"\n    ) as HTMLElement;\n    this.totalQuestions = document.getElementById(\n      \"total_questions\"\n    ) as HTMLElement;\n  }\n\n  updateView(current: number, total: number) {\n    this.currentQuestion.innerText = String(current);\n    this.totalQuestions.innerText = String(total);\n  }\n}\n","import { consts } from \"../constants\";\n\nexport type ModalModel = {\n  title: string;\n  body: string;\n  buttons: ModalButtonModel[];\n};\n\nexport type ModalButtonModel = {\n  text: string;\n  id: string;\n  type: \"accept\" | \"reject\";\n};\n\nexport class ModalView {\n  wrapper: HTMLDivElement;\n  modal: HTMLDivElement;\n  title: HTMLHeadingElement;\n  body: HTMLDivElement;\n  footer: HTMLDivElement;\n  show = false;\n  handler: null | ((id: string) => void) = null;\n\n  constructor() {\n    this.wrapper = this.createWrapper();\n    this.title = this.createTitle();\n    this.body = this.createBody();\n    this.footer = this.createFooter();\n    this.modal = this.createModal();\n  }\n\n  createWrapper(): HTMLDivElement {\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = \"modal-backdrop fade\";\n    return wrapper;\n  }\n\n  createTitle(): HTMLHeadingElement {\n    const title = document.createElement(\"h5\");\n    title.className = \"modal-title\";\n    return title;\n  }\n\n  createBody(): HTMLDivElement {\n    const body = document.createElement(\"div\");\n    body.className = \"modal-body\";\n    return body;\n  }\n\n  createFooter(): HTMLDivElement {\n    const footer = document.createElement(\"div\");\n    footer.className = \"modal-footer\";\n    return footer;\n  }\n\n  createModal(): HTMLDivElement {\n    const modal = document.createElement(\"div\");\n    modal.className = \"modal fade\";\n    modal.style.cssText = `display: block`;\n\n    const dialog = document.createElement(\"div\");\n    dialog.className = \"modal-dialog  modal-dialog-centered\";\n\n    const content = document.createElement(\"div\");\n    content.className = \"modal-content\";\n\n    const header = document.createElement(\"div\");\n    header.className = \"modal-header\";\n\n    modal.append(dialog);\n    dialog.append(content);\n    content.append(header);\n    header.append(this.title);\n    content.append(this.body);\n    content.append(this.footer);\n\n    return modal;\n  }\n\n  open() {\n    if (!this.show) {\n      this.show = true;\n      document.body.append(this.modal);\n      document.body.append(this.wrapper);\n      setTimeout(() => {\n        this.wrapper.classList.add(\"show\");\n        this.modal.classList.add(\"show\");\n      }, consts.animationPuase);\n    }\n  }\n\n  close() {\n    if (this.show) {\n      this.show = false;\n      this.wrapper.classList.remove(\"show\");\n      this.modal.classList.remove(\"show\");\n      setTimeout(() => {\n        this.wrapper.parentElement?.removeChild(this.wrapper);\n        this.modal.parentElement?.removeChild(this.modal);\n      }, consts.animationLength);\n    }\n  }\n\n  updateView(model: ModalModel) {\n    this.title.innerHTML = model.title;\n    this.body.innerHTML = model.body;\n    this.footer.innerHTML = \"\";\n    model.buttons.forEach((button) => {\n      this.footer.append(this.createButton(button));\n    });\n    this.open();\n  }\n\n  createButton(model: ModalButtonModel): HTMLButtonElement {\n    const button = document.createElement(\"button\");\n    button.setAttribute(\"type\", \"button\");\n    button.className = model.type === \"accept\" ? \"btn btn-primary\" : \"btn\";\n    button.innerText = model.text;\n    button.addEventListener(\"click\", () => {\n      this.handler && this.handler(model.id);\n    });\n    return button;\n  }\n\n  addButtonHandler(handler: (id: string) => void) {\n    this.handler = handler;\n  }\n}\n","import { ModalView } from \"./modal-view\";\n\nexport class RestorelView {\n  modal: ModalView;\n\n  constructor(modal: ModalView) {\n    this.modal = modal;\n  }\n\n  updateView(open: boolean) {\n    if (open) {\n      this.modal.updateView({\n        title: \"Restore training?\",\n        body: `<p>Do you want to continue the last training?</p>`,\n        buttons: [\n          { text: \"Close\", id: \"restart\", type: \"reject\" },\n          { text: \"Restore\", id: \"restore\", type: \"accept\" },\n        ],\n      });\n    } else {\n      this.modal.close();\n    }\n  }\n}\n","import { Result } from \"../models/tasks-model\";\nimport { ModalView } from \"./modal-view\";\n\nexport class ResultlView {\n  modal: ModalView;\n\n  constructor(modal: ModalView) {\n    this.modal = modal;\n  }\n\n  updateView(result: Result | null, open = true) {\n    if (result && open) {\n      const wordWithMostWrrors = result.wordWithMostWrrors || \"—\";\n      this.modal.updateView({\n        title: \"Training result\",\n        body: `<p>Number of words without errors: ${result.wordsWithoutErrors}</p>\n        <p>Number of errors: ${result.errorCount}</p>\n        <p>The word with the most errors: ${wordWithMostWrrors}</p>`,\n        buttons: [{ text: \"Try again\", id: \"restart\", type: \"accept\" }],\n      });\n    } else {\n      this.modal.close;\n    }\n  }\n}\n","import { Task } from \"../models/tasks-model\";\nimport { ButtonView } from \"./button-view\";\n\nexport class TaskView {\n  lettersWrapper: HTMLElement;\n  answerWrapper: HTMLElement;\n  buttons: Map<string, ButtonView> = new Map();\n  taskId: string | null = null;\n\n  constructor() {\n    this.lettersWrapper = document.getElementById(\"letters\") as HTMLElement;\n    this.answerWrapper = document.getElementById(\"answer\") as HTMLElement;\n  }\n\n  updateView(task: Task) {\n    if (this.taskId !== task.id) {\n      this.taskId = task.id;\n      this.deletButtons();\n      this.createButtons(task);\n    } else {\n      this.detachButtons();\n    }\n    this.updateButtonsView(task);\n  }\n\n  deletButtons() {\n    this.answerWrapper.innerHTML = \"\";\n    this.lettersWrapper.innerHTML = \"\";\n    this.buttons = new Map();\n  }\n\n  createButtons(task: Task) {\n    [...task.solved, ...task.letters].forEach((letter) => {\n      const button = new ButtonView(letter);\n      this.buttons.set(letter.id, button);\n    });\n  }\n\n  detachButtons() {\n    this.buttons.forEach((button) => {\n      const element = button.getElement();\n      element.parentElement?.removeChild(element);\n    });\n  }\n\n  updateButtonsView(task: Task) {\n    task.solved.forEach((letter) => {\n      const button = this.buttons.get(letter.id);\n      if (!button) {\n        return;\n      }\n      if (task.status === \"failed\") {\n        button.makeFailed();\n      } else {\n        button.makeSuccess();\n      }\n      this.answerWrapper.append(button.getElement());\n    });\n    task.letters.forEach((letter) => {\n      const button = this.buttons.get(letter.id);\n      if (button) {\n        button.makePrimary();\n        this.lettersWrapper.append(button.getElement());\n      }\n    });\n  }\n\n  error(id: string) {\n    this.buttons.get(id)?.makeError();\n  }\n\n  addSelectLetterHandler(handler: (id: string) => void) {\n    this.lettersWrapper.addEventListener(\"click\", (event: Event) => {\n      const target = event.target as HTMLElement;\n      const index = target.getAttribute(\"data-index\");\n      if (index) {\n        handler(index);\n      }\n    });\n  }\n\n  addEnterLetterHandler(handler: (symbol: string) => void) {\n    document.addEventListener(\"keydown\", (event) => {\n      const symbol = event.key.toLocaleLowerCase();\n      if (/^[a-z]$/.test(symbol) && !event.metaKey && !event.ctrlKey) {\n        handler(symbol);\n      }\n    });\n  }\n}\n","import { Progress, Result, Task } from \"../models/tasks-model\";\nimport { ButtonView } from \"./button-view\";\nimport { CounterView } from \"./counter-view\";\nimport { ModalView } from \"./modal-view\";\nimport { RestorelView } from \"./restore-view\";\nimport { ResultlView } from \"./result-view\";\nimport { TaskView } from \"./task-view\";\n\ninterface ViewInterface {\n  addSelectLetterHandler: (handler: (id: string) => void) => void;\n  addEnterLetterHandler: (handler: (id: string) => void) => void;\n  addHistoryHandler: (handler: () => void) => void;\n  addModalButtonHandler: (handler: (id: string) => void) => void;\n\n  updateTaskView: (task: Task) => void;\n  updateResultView: (result: Result, open: boolean) => void;\n  updateRestoreView: (open: boolean) => void;\n  updateCountView: (progress: Progress) => void;\n  error: (id: string) => void;\n  closeModal: () => void;\n}\n\nclass View implements ViewInterface {\n  buttons: Map<string, ButtonView> = new Map();\n  modal: ModalView;\n  task: TaskView;\n  result: ResultlView;\n  restore: RestorelView;\n  counter: CounterView;\n\n  constructor() {\n    this.task = new TaskView();\n    this.counter = new CounterView();\n    this.modal = new ModalView();\n    this.result = new ResultlView(this.modal);\n    this.restore = new RestorelView(this.modal);\n  }\n\n  updateCountView(progress: Progress) {\n    this.counter.updateView(progress.taskNumber, progress.trainingLength);\n  }\n\n  updateTaskView(task: Task) {\n    this.task.updateView(task);\n  }\n\n  error(id: string) {\n    this.task.error(id);\n  }\n\n  addSelectLetterHandler(handler: (id: string) => void) {\n    this.task.addSelectLetterHandler(handler);\n  }\n\n  addEnterLetterHandler(handler: (id: string) => void) {\n    this.task.addEnterLetterHandler(handler);\n  }\n\n  updateResultView(result: Result, open: boolean) {\n    this.result.updateView(result, open);\n  }\n\n  updateRestoreView(open: boolean) {\n    this.restore.updateView(open);\n  }\n\n  closeModal() {\n    this.modal.close();\n  }\n\n  addModalButtonHandler(handler: (id: string) => void) {\n    this.modal.addButtonHandler(handler);\n  }\n\n  addHistoryHandler(handler: () => void) {\n    window.addEventListener(\"popstate\", () => {\n      handler();\n    });\n  }\n}\n\nexport { View };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Model } from \"./scripts/models/models\";\nimport { Presenter } from \"./scripts/presenter\";\nimport { Reactor } from \"./scripts/utils\";\nimport { View } from \"./scripts/views/views\";\n\nconst customEvents = new Reactor();\nconst model = new Model(customEvents);\nconst view = new View();\n\nnew Presenter(model, view, customEvents);\n"],"names":[],"sourceRoot":""}